// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a4bhUrqWbeGH9fzcN7EwNU
// Component: aO3TpOHk3M
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import WalletConnectItem from "../../WalletConnectItem"; // plasmic-import: ajlQM03Cp6/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_defibridge.module.css"; // plasmic-import: a4bhUrqWbeGH9fzcN7EwNU/projectcss
import sty from "./PlasmicWalletConnectContent.module.css"; // plasmic-import: aO3TpOHk3M/css

export type PlasmicWalletConnectContent__VariantMembers = {};

export type PlasmicWalletConnectContent__VariantsArgs = {};
type VariantPropType = keyof PlasmicWalletConnectContent__VariantsArgs;
export const PlasmicWalletConnectContent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicWalletConnectContent__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicWalletConnectContent__ArgsType;
export const PlasmicWalletConnectContent__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicWalletConnectContent__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultWalletConnectContentProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicWalletConnectContent__RenderFunc(props: {
  variants: PlasmicWalletConnectContent__VariantsArgs;
  args: PlasmicWalletConnectContent__ArgsType;
  overrides: PlasmicWalletConnectContent__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <div className={classNames(projectcss.all, sty.freeBox__kpaje)}>
              <div className={classNames(projectcss.all, sty.freeBox___7VpHm)}>
                <WalletConnectItem
                  buttonWallet={
                    <React.Fragment>
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___5M5)}
                        displayHeight={"24px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"24px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/defibridge/images/metaMaskFoxsvgpng.png",
                          fullWidth: 800,
                          fullHeight: 800,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qt2JV
                        )}
                      >
                        {"Metamask"}
                      </div>
                    </React.Fragment>
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.walletConnectItem___3M0Fu
                  )}
                />
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__eGxcC)}>
                <WalletConnectItem
                  buttonWallet={
                    <React.Fragment>
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__qomAp)}
                        displayHeight={"24px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"24px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/defibridge/images/coinbaseCoinLogoC86F46D7B8Seeklogocompng.png",
                          fullWidth: 300,
                          fullHeight: 300,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eVdr
                        )}
                      >
                        {"Wallet Name"}
                      </div>
                    </React.Fragment>
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.walletConnectItem__g0O7
                  )}
                />
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__vQed)}>
                <WalletConnectItem
                  buttonWallet={
                    <React.Fragment>
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__w3ZoC)}
                        displayHeight={"24px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"24px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/defibridge/images/walletconnectLogoEe83B50C97Seeklogocompng.png",
                          fullWidth: 300,
                          fullHeight: 300,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kpyea
                        )}
                      >
                        {"Wallet Connect"}
                      </div>
                    </React.Fragment>
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.walletConnectItem___1YTeT
                  )}
                />
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__eGnlj)}>
                <WalletConnectItem
                  buttonWallet={
                    <React.Fragment>
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__sxB5L)}
                        displayHeight={"24px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"24px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/defibridge/images/walletsvg.svg",
                          fullWidth: 150,
                          fullHeight: 150,
                          aspectRatio: 1
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aw1Ah
                        )}
                      >
                        {"Torus"}
                      </div>
                    </React.Fragment>
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.walletConnectItem___3NfwE
                  )}
                />
              </div>
            </div>
          ),

          value: args.children
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWalletConnectContent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWalletConnectContent__VariantsArgs;
    args?: PlasmicWalletConnectContent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWalletConnectContent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWalletConnectContent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicWalletConnectContent__ArgProps,
          internalVariantPropNames: PlasmicWalletConnectContent__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicWalletConnectContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWalletConnectContent";
  } else {
    func.displayName = `PlasmicWalletConnectContent.${nodeName}`;
  }
  return func;
}

export const PlasmicWalletConnectContent = Object.assign(
  // Top-level PlasmicWalletConnectContent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicWalletConnectContent
    internalVariantProps: PlasmicWalletConnectContent__VariantProps,
    internalArgProps: PlasmicWalletConnectContent__ArgProps
  }
);

export default PlasmicWalletConnectContent;
/* prettier-ignore-end */
