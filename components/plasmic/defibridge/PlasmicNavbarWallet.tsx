// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a4bhUrqWbeGH9fzcN7EwNU
// Component: RJzPsvPN81
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Avatar } from "@chakra-ui/react"; // plasmic-import: kpaNHoMO6b/codeComponent
import { AvatarBadge } from "@chakra-ui/react"; // plasmic-import: SNJRDQ3EZG/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_defibridge.module.css"; // plasmic-import: a4bhUrqWbeGH9fzcN7EwNU/projectcss
import sty from "./PlasmicNavbarWallet.module.css"; // plasmic-import: RJzPsvPN81/css

export type PlasmicNavbarWallet__VariantMembers = {};

export type PlasmicNavbarWallet__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbarWallet__VariantsArgs;
export const PlasmicNavbarWallet__VariantProps = new Array<VariantPropType>();

export type PlasmicNavbarWallet__ArgsType = {
  walletProfile?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNavbarWallet__ArgsType;
export const PlasmicNavbarWallet__ArgProps = new Array<ArgPropType>(
  "walletProfile"
);

export type PlasmicNavbarWallet__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultNavbarWalletProps {
  walletProfile?: React.ReactNode;
  className?: string;
}

function PlasmicNavbarWallet__RenderFunc(props: {
  variants: PlasmicNavbarWallet__VariantsArgs;
  args: PlasmicNavbarWallet__ArgsType;
  overrides: PlasmicNavbarWallet__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <Avatar
                className={classNames("__wab_instance", sty.avatar__mAPla)}
                name={"Kola Tioluwani" as const}
                showBorder={true}
                size={"sm" as const}
                src={"https://bit.ly/dan-abramov" as const}
              >
                {true ? (
                  <AvatarBadge
                    bg={"green.500" as const}
                    boxSize={"1.25em" as const}
                    className={classNames(
                      "__wab_instance",
                      sty.avatarBadge__jxfbG
                    )}
                  />
                ) : null}
              </Avatar>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iLViR
                )}
              >
                {"0x95df...9605"}
              </div>
            </React.Fragment>
          ),
          value: args.walletProfile
        })}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarWallet__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarWallet__VariantsArgs;
    args?: PlasmicNavbarWallet__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbarWallet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbarWallet__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavbarWallet__ArgProps,
          internalVariantPropNames: PlasmicNavbarWallet__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNavbarWallet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarWallet";
  } else {
    func.displayName = `PlasmicNavbarWallet.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarWallet = Object.assign(
  // Top-level PlasmicNavbarWallet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicNavbarWallet
    internalVariantProps: PlasmicNavbarWallet__VariantProps,
    internalArgProps: PlasmicNavbarWallet__ArgProps
  }
);

export default PlasmicNavbarWallet;
/* prettier-ignore-end */
