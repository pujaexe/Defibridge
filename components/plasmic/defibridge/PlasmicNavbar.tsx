// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a4bhUrqWbeGH9fzcN7EwNU
// Component: LEgvBeEm_U
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarWallet from "../../NavbarWallet"; // plasmic-import: RJzPsvPN81/component
import { Avatar } from "@chakra-ui/react"; // plasmic-import: kpaNHoMO6b/codeComponent
import { AvatarBadge } from "@chakra-ui/react"; // plasmic-import: SNJRDQ3EZG/codeComponent
import { Modal } from "@chakra-ui/react"; // plasmic-import: XqREBLaZkFt/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_defibridge.module.css"; // plasmic-import: a4bhUrqWbeGH9fzcN7EwNU/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: LEgvBeEm_U/css

export type PlasmicNavbar__VariantMembers = {
  isConnected: "isConnected";
};

export type PlasmicNavbar__VariantsArgs = {
  isConnected?: SingleBooleanChoiceArg<"isConnected">;
};

type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>(
  "isConnected"
);

export type PlasmicNavbar__ArgsType = {
  rightMenu?: React.ReactNode;
  leftMenu?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>(
  "rightMenu",
  "leftMenu"
);

export type PlasmicNavbar__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  leftMenu?: p.Flex<"div">;
  rightMenu?: p.Flex<"div">;
  navbarWallet?: p.Flex<typeof NavbarWallet>;
};

export interface DefaultNavbarProps {
  rightMenu?: React.ReactNode;
  leftMenu?: React.ReactNode;
  isConnected?: SingleBooleanChoiceArg<"isConnected">;
  className?: string;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {true ? (
          <div
            data-plasmic-name={"leftMenu"}
            data-plasmic-override={overrides.leftMenu}
            className={classNames(projectcss.all, sty.leftMenu)}
          >
            {false
              ? p.renderPlasmicSlot({
                  defaultContents: null,
                  value: args.leftMenu
                })
              : null}
          </div>
        ) : null}

        <p.Stack
          as={"div"}
          data-plasmic-name={"rightMenu"}
          data-plasmic-override={overrides.rightMenu}
          hasGap={true}
          className={classNames(projectcss.all, sty.rightMenu)}
        >
          {(
            hasVariant(variants, "isConnected", "isConnected") ? true : true
          ) ? (
            <NavbarWallet
              data-plasmic-name={"navbarWallet"}
              data-plasmic-override={overrides.navbarWallet}
              className={classNames("__wab_instance", sty.navbarWallet, {
                [sty.navbarWalletisConnected]: hasVariant(
                  variants,
                  "isConnected",
                  "isConnected"
                )
              })}
            />
          ) : null}
          {(hasVariant(variants, "isConnected", "isConnected") ? false : true)
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <Modal
                    buttonCTACaption={"Gasskeun" as const}
                    buttonCaption={"Connect Wallet" as const}
                    buttonCloseCaption={"Close" as const}
                    className={classNames("__wab_instance", sty.modal__rsFwT)}
                    headerText={"Judul Modal" as const}
                  />
                ),

                value: args.rightMenu
              })
            : null}
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "leftMenu", "rightMenu", "navbarWallet"],
  freeBox: ["freeBox", "leftMenu", "rightMenu", "navbarWallet"],
  leftMenu: ["leftMenu"],
  rightMenu: ["rightMenu", "navbarWallet"],
  navbarWallet: ["navbarWallet"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  leftMenu: "div";
  rightMenu: "div";
  navbarWallet: typeof NavbarWallet;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    leftMenu: makeNodeComponent("leftMenu"),
    rightMenu: makeNodeComponent("rightMenu"),
    navbarWallet: makeNodeComponent("navbarWallet"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
