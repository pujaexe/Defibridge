// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a4bhUrqWbeGH9fzcN7EwNU
// Component: O1BbL9l8IH
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuItem from "../../MenuItem"; // plasmic-import: 7MQ4xCpNiH/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_defibridge.module.css"; // plasmic-import: a4bhUrqWbeGH9fzcN7EwNU/projectcss
import sty from "./PlasmicSideBar.module.css"; // plasmic-import: O1BbL9l8IH/css

import HomeFillSvgrepoComsvgIcon from "./icons/PlasmicIcon__HomeFillSvgrepoComsvg"; // plasmic-import: apLhSwR1Ut/icon
import ImageSvgrepoComsvgIcon from "./icons/PlasmicIcon__ImageSvgrepoComsvg"; // plasmic-import: -pLceZx7Ap/icon
import BankSvgrepoComsvgIcon from "./icons/PlasmicIcon__BankSvgrepoComsvg"; // plasmic-import: 8vPsLM-P6Z/icon
import ProfileUserSvgrepoComsvgIcon from "./icons/PlasmicIcon__ProfileUserSvgrepoComsvg"; // plasmic-import: Figa9KsMcR/icon

export type PlasmicSideBar__VariantMembers = {};

export type PlasmicSideBar__VariantsArgs = {};
type VariantPropType = keyof PlasmicSideBar__VariantsArgs;
export const PlasmicSideBar__VariantProps = new Array<VariantPropType>();

export type PlasmicSideBar__ArgsType = {
  menus?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSideBar__ArgsType;
export const PlasmicSideBar__ArgProps = new Array<ArgPropType>("menus");

export type PlasmicSideBar__OverridesType = {
  root?: p.Flex<"div">;
  sidebarWrapper?: p.Flex<"div">;
  logo?: p.Flex<"a"> & Partial<LinkProps>;
  img?: p.Flex<typeof p.PlasmicImg>;
  menuWrapper?: p.Flex<"div">;
  footer?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultSideBarProps {
  menus?: React.ReactNode;
  className?: string;
}

function PlasmicSideBar__RenderFunc(props: {
  variants: PlasmicSideBar__VariantsArgs;
  args: PlasmicSideBar__ArgsType;
  overrides: PlasmicSideBar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"sidebarWrapper"}
        data-plasmic-override={overrides.sidebarWrapper}
        hasGap={true}
        className={classNames(projectcss.all, sty.sidebarWrapper)}
      >
        <p.PlasmicLink
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          className={classNames(projectcss.all, projectcss.a, sty.logo)}
          component={Link}
          platform={"nextjs"}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"32px" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
          />
        </p.PlasmicLink>

        {true ? (
          <div
            data-plasmic-name={"menuWrapper"}
            data-plasmic-override={overrides.menuWrapper}
            className={classNames(projectcss.all, sty.menuWrapper)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <MenuItem
                    button={
                      <React.Fragment>
                        <HomeFillSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__ncJr)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fWwOz
                          )}
                        >
                          {"Home"}
                        </div>
                      </React.Fragment>
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem__f3N15
                    )}
                  />

                  <MenuItem
                    button={
                      <React.Fragment>
                        <ImageSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__rpjvM)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__h91Nc
                          )}
                        >
                          {"NFTs"}
                        </div>
                      </React.Fragment>
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem___93Q6S
                    )}
                  />

                  <MenuItem
                    button={
                      <React.Fragment>
                        <BankSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__phAv)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__h91Nc
                          )}
                        >
                          {"Defi"}
                        </div>
                      </React.Fragment>
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem__dgpBb
                    )}
                  />

                  <MenuItem
                    button={
                      <React.Fragment>
                        <ProfileUserSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg___8YKW)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6CXw
                          )}
                        >
                          {"Profile"}
                        </div>
                      </React.Fragment>
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem__dx5Or
                    )}
                  />
                </React.Fragment>
              ),
              value: args.menus
            })}
          </div>
        ) : null}

        <div
          data-plasmic-name={"footer"}
          data-plasmic-override={overrides.footer}
          className={classNames(projectcss.all, sty.footer)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Terms of Services - Privacy Policy"}
          </div>
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sidebarWrapper",
    "logo",
    "img",
    "menuWrapper",
    "footer",
    "text"
  ],
  sidebarWrapper: [
    "sidebarWrapper",
    "logo",
    "img",
    "menuWrapper",
    "footer",
    "text"
  ],
  logo: ["logo", "img"],
  img: ["img"],
  menuWrapper: ["menuWrapper"],
  footer: ["footer", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sidebarWrapper: "div";
  logo: "a";
  img: typeof p.PlasmicImg;
  menuWrapper: "div";
  footer: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSideBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSideBar__VariantsArgs;
    args?: PlasmicSideBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSideBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSideBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSideBar__ArgProps,
          internalVariantPropNames: PlasmicSideBar__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSideBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSideBar";
  } else {
    func.displayName = `PlasmicSideBar.${nodeName}`;
  }
  return func;
}

export const PlasmicSideBar = Object.assign(
  // Top-level PlasmicSideBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidebarWrapper: makeNodeComponent("sidebarWrapper"),
    logo: makeNodeComponent("logo"),
    img: makeNodeComponent("img"),
    menuWrapper: makeNodeComponent("menuWrapper"),
    footer: makeNodeComponent("footer"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicSideBar
    internalVariantProps: PlasmicSideBar__VariantProps,
    internalArgProps: PlasmicSideBar__ArgProps
  }
);

export default PlasmicSideBar;
/* prettier-ignore-end */
