// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a4bhUrqWbeGH9fzcN7EwNU
// Component: _3xOiX4pKP
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Heading } from "@chakra-ui/react"; // plasmic-import: By0uZvvYZc/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_defibridge.module.css"; // plasmic-import: a4bhUrqWbeGH9fzcN7EwNU/projectcss
import sty from "./PlasmicAssetItems.module.css"; // plasmic-import: _3xOiX4pKP/css

import NextSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__NextSvgrepoCom1Svg"; // plasmic-import: rpbvt0S2XD/icon

export type PlasmicAssetItems__VariantMembers = {};

export type PlasmicAssetItems__VariantsArgs = {};
type VariantPropType = keyof PlasmicAssetItems__VariantsArgs;
export const PlasmicAssetItems__VariantProps = new Array<VariantPropType>();

export type PlasmicAssetItems__ArgsType = {
  image?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAssetItems__ArgsType;
export const PlasmicAssetItems__ArgProps = new Array<ArgPropType>(
  "image",
  "children",
  "slot"
);

export type PlasmicAssetItems__OverridesType = {
  root?: p.Flex<"div">;
  items?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultAssetItemsProps {
  image?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

function PlasmicAssetItems__RenderFunc(props: {
  variants: PlasmicAssetItems__VariantsArgs;
  args: PlasmicAssetItems__ArgsType;
  overrides: PlasmicAssetItems__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"items"}
        data-plasmic-override={overrides.items}
        className={classNames(projectcss.all, sty.items)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___985U)}>
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__zu6N5)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"32px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/defibridge/images/aaveV2Png.png",
                  fullWidth: 250,
                  fullHeight: 250,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.image
          })}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__ncaHu)}>
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <Heading
                  className={classNames("__wab_instance", sty.heading__rtpgj)}
                  noOfLines={1 as const}
                  size={"sm" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q4Ewj
                    )}
                  >
                    {"Matic"}
                  </div>
                </Heading>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6RfHn
                  )}
                >
                  {"$0.94"}
                </div>
              </React.Fragment>
            ),
            value: args.children
          })}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox___4Vdi)}>
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <Heading
                  className={classNames("__wab_instance", sty.heading__p9NZc)}
                  noOfLines={1 as const}
                  size={"sm" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jvZCq
                    )}
                  >
                    {"$6.96"}
                  </div>
                </Heading>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fdXq5
                  )}
                >
                  {"7.44"}
                </div>
              </React.Fragment>
            ),
            value: args.slot
          })}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__hz8Uk)}>
          <NextSvgrepoCom1SvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "items", "svg"],
  items: ["items", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  items: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAssetItems__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAssetItems__VariantsArgs;
    args?: PlasmicAssetItems__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAssetItems__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAssetItems__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAssetItems__ArgProps,
          internalVariantPropNames: PlasmicAssetItems__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAssetItems__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAssetItems";
  } else {
    func.displayName = `PlasmicAssetItems.${nodeName}`;
  }
  return func;
}

export const PlasmicAssetItems = Object.assign(
  // Top-level PlasmicAssetItems renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    items: makeNodeComponent("items"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicAssetItems
    internalVariantProps: PlasmicAssetItems__VariantProps,
    internalArgProps: PlasmicAssetItems__ArgProps
  }
);

export default PlasmicAssetItems;
/* prettier-ignore-end */
